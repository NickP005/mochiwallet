name: iOS Build & Release

on:
  push:
    branches:
      - ios
    tags:
      - 'ios-v*'  # Trigger su tag tipo ios-v1.0.0

jobs:
  build-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
        
      - name: Install CocoaPods
        run: gem install cocoapods
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build Web App
        run: npm run build:web
      
      - name: Add iOS Platform
        run: |
          npx cap add ios
          npx cap sync ios

      - name: Install iOS Dependencies
        run: |
          cd ios/App
          pod install
          cd ../..

      # Solo per branch ios - build di test
      - name: Build iOS Debug (solo per branch)
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Debug -sdk iphonesimulator build
      
      # Solo per tag - build di distribuzione
      - name: Build iOS Release (solo per tag)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Configurazione certificati
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create keychain and import certificate
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Build
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release archive -archivePath $RUNNER_TEMP/MochimoWallet.xcarchive
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/MochimoWallet.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $RUNNER_TEMP/export
          
      - name: Upload Artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: ios-app
          path: ${{ runner.temp }}/export/MochimoWallet.ipa
          
      # Solo per tag - release su TestFlight
      - name: Upload to TestFlight
        if: startsWith(github.ref, 'refs/tags/')
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          # Generate App Store Connect API key file
          mkdir -p ~/.appstoreconnect/private_keys/
          echo -n "$APP_STORE_CONNECT_API_KEY_CONTENT" > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Upload with Transporter
          xcrun altool --upload-app --type ios --file $RUNNER_TEMP/export/MochimoWallet.ipa --apiKey $APP_STORE_CONNECT_API_KEY_ID --apiIssuer $APP_STORE_CONNECT_ISSUER_ID
